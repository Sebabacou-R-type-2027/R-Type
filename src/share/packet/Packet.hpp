#ifndef PACKET_HPP
#define PACKET_HPP

#include <cstdint>
#include <exception>
#include <string>
#include <variant>
#include <asio/ip/udp.hpp>

#include "PacketFactory.hpp"

/**
 * @class Packet
 * @brief Base class representing a generic packet.
 * @details The Packet class is intended to be inherited by specific packet types.
 * All packets must derive from this base class to ensure proper behavior and interface.
 * This class manages packet size, type, and the packet data. It also provides mechanisms to send and format packets.
 */
class Packet {
    public:

        /**
         * @struct uint24_t
         * @brief A 24-bit unsigned integer structure.
         * @details This structure holds a 24-bit unsigned integer, stored in an array of 3 bytes.
         */
        struct uint24_t {
            uint8_t data[3]; ///< The 24-bit data represented as 3 bytes.
        };

        /**
         * @class PacketException
         * @brief Exception class specifically for handling Packet-related errors.
         * @details The PacketException is thrown when there are errors in packet processing.
         */
        class PacketException : public std::exception {
            public:
                /**
                 * @brief Constructor for PacketException.
                 * @param message The error message associated with the exception.
                 * @param id The ID of the packet that caused the exception. Can be either 8-bit or 16-bit.
                 */
                explicit PacketException(std::string message, std::variant<uint8_t, uint16_t> id)
                      : packet_error_("PacketError[" + std::visit([](auto&& arg) { return std::to_string(static_cast<uint32_t>(arg)); }, id) + "]: "), msg_(std::move(message)) {}

                /**
                 * @brief Retrieve the full error message.
                 * @return The error message as a C-style string.
                 */
                [[nodiscard]]
                const char* what() const noexcept override {
                    full_message_ = packet_error_ + msg_;
                    return full_message_.c_str();
                }

            private:
                std::string packet_error_; ///< Error type string with packet ID information.
                std::string msg_; ///< The detailed error message.
                mutable std::string full_message_; ///< Cached full error message, combined from packet_error_ and msg_.
        };

        /**
         * @brief Constructor for the Packet class.
         * @param type The type of the packet, as defined by PacketFactory.
         * @param id The packet ID generated by the factory.
         * @param socket The UDP socket used for transmission.
         * @details Initializes the packet type and ID and associates it with a UDP socket.
         */
        Packet(PacketFactory::TypePacket type, uint16_t id, asio::ip::udp::socket& socket);

        virtual ~Packet() = default;
        /**
         * @brief Set the packet ID.
         * @param id The packet ID to set.
         * @details Sets the ID for the packet, ensuring it is properly encoded as an 8-bit or 16-bit integer.
         */
        void set_id(uint16_t id);

        /**
         * @brief Set the packet type.
         * @details The type of the packet should be defined by the child class.
         * @param type The packet type to set.
         */
        void set_type(uint8_t type);

        /**
         * @brief Extract the data from a buffer.
         * @param buffer The data buffer containing the packet.
         * @param size The size of the buffer.
         * @return A string containing the data of the packet.
         */
        static std::string extract_data(char buffer[65535], size_t size);


        /**
         * @brief Extract the ID from a buffer.
         * @param buffer The data buffer containing the packet.
         * @param size The size of the buffer.
         * @return The ID of the packet.
         */
        static uint32_t extract_id(char buffer[65535], size_t size);


        /**
         * @brief Extract the type from a buffer.
         * @param buffer The data buffer containing the packet.
         * @param size The size of the buffer.
         * @return The type of the packet.
         */
        static uint32_t extract_type(char buffer[65535], size_t size);


        /**
         * @brief Extract the size from a buffer.
         * @param buffer The data buffer containing the packet.
         * @param size The size of the buffer.
         * @return The size of the packet.
         */
        static uint32_t extract_size(char buffer[65535], size_t size);

        /**
         * @brief Get the packet size.
         * @return The size of the packet.
         */
        [[nodiscard]]
        uint32_t get_size() const;

        /**
         * @brief Get the packet ID.
         * @return The ID of the packet.
         */
        [[nodiscard]]
        uint16_t get_idp() const;

        /**
         * @brief Get the packet type.
         * @return The type of the packet.
         */
        [[nodiscard]]
        uint8_t get_type() const;

        /**
         * @brief Pure virtual method to set the packet's data.
         * @details This method should be implemented by derived classes to format the packet's data before sending.
         */
        virtual void format_data() = 0;

        /**
         * @brief Convert a 32-bit number into a 24-bit number (uint24_t).
         * @param number The number to convert.
         * @return The number converted into uint24_t format.
         */
        [[nodiscard]] static uint24_t convert_to_uint24(uint32_t number);

        /**
         * @brief Overload of the output stream operator for the Packet class.
         * @param os The output stream.
         * @param packet The packet to display.
         * @return The output stream containing the packet details.
         */
        friend std::ostream& operator<<(std::ostream& os, const Packet& packet);

        /**
         * @brief Overload of the output stream operator for the uint24_t struct.
         * @param os The output stream.
         * @param value The uint24_t value to display.
         * @return The output stream containing the uint24_t value.
         */
        friend std::ostream& operator<<(std::ostream& os, const uint24_t& value);

        /**
         * @brief Send the packet to a receiver.
         * @param receiver The UDP endpoint representing the receiver of the packet.
         * @details This method serializes the packet data and sends it via the UDP socket. If the data is not set, it throws an exception.
         */
        void send_packet(const asio::ip::udp::endpoint& receiver);

        /**
         * @brief Get the packet's data.
         * @return A string containing the data of the packet.
         */
        [[nodiscard]]
        std::string get_data() const;

        /**
         * @brief Set the packet size based on its data.
         * @details Determines the size of the packet based on its data and assigns the correct size type (8-bit, 16-bit, or 24-bit).
         */
        void set_size();

    protected:
        std::string data_; ///< The data content of the packet.
        bool is_data_set_ = false; ///< Boolean flag indicating if the data is set.

    private:
        /**
         * @brief Get the size type of packet based on a number.
         * @param number The number to evaluate.
         * @return The size type (varint).
         */
        [[nodiscard]] int get_size_varint(uint32_t number);

        /**
         * @brief Extract packet information from a buffer.
         * @param buffer The data buffer containing the packet.
         * @param size The size of the buffer.
         * @return A tuple containing packet details (size, ID, type, and data).
         * @details This method is used to parse a raw packet from a buffer and extract the essential information.
         */
        static std::tuple<unsigned, unsigned, unsigned, std::string> extract_packet(char buffer[65535], size_t size);

        std::variant<uint8_t, uint16_t, uint24_t> size_; ///< Packet size, can be 8-bit, 16-bit, or 24-bit.
        std::variant<uint8_t, uint16_t> idp_; ///< Packet ID, can be 8-bit or 16-bit.
        uint8_t type_; ///< The packet type.
        asio::ip::udp::socket& socket_; ///< The socket used to transmit the packet.
};

#endif // PACKET_HPP
